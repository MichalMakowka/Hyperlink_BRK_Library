
Hyperlink_BRK_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000350  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d8  080004e0  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d8  080004d8  000104e0  2**0
                  CONTENTS
  4 .ARM          00000000  080004d8  080004d8  000104e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d8  080004e0  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d8  080004d8  000104d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004dc  080004dc  000104dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000000  080004e0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080004e0  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000027cc  00000000  00000000  00010510  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000006bc  00000000  00000000  00012cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000e0  00000000  00000000  00013398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000098  00000000  00000000  00013478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014147  00000000  00000000  00013510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000018f3  00000000  00000000  00027657  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00069d1b  00000000  00000000  00028f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00092c65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000200  00000000  00000000  00092ce0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004c0 	.word	0x080004c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080004c0 	.word	0x080004c0

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <CanInit>:
 */

#include "can.h"


void CanInit(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0


	CAN->MCR |= CAN_MCR_INRQ;			// Initialisation mode on
 8000208:	4b11      	ldr	r3, [pc, #68]	; (8000250 <CanInit+0x4c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a10      	ldr	r2, [pc, #64]	; (8000250 <CanInit+0x4c>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6013      	str	r3, [r2, #0]

	// *** CAN Test Mode *** //
//	CAN1->BTR |= CAN_BTR_LBKM;			// Loopback mode enabled (For Debug purposes)
	// ********************* //

	NVIC_EnableIRQ(CAN_TX_IRQn);
 8000214:	2013      	movs	r0, #19
 8000216:	f7ff ffd7 	bl	80001c8 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(CAN_RX0_IRQn);
 800021a:	2014      	movs	r0, #20
 800021c:	f7ff ffd4 	bl	80001c8 <__NVIC_EnableIRQ>


	CAN->MCR &= ~CAN_MCR_INRQ;			// Initialisation mode off
 8000220:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <CanInit+0x4c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <CanInit+0x4c>)
 8000226:	f023 0301 	bic.w	r3, r3, #1
 800022a:	6013      	str	r3, [r2, #0]
	while (CAN->MSR & CAN_MCR_INRQ);
 800022c:	bf00      	nop
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <CanInit+0x4c>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	f003 0301 	and.w	r3, r3, #1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <CanInit+0x2a>

	CAN->BTR = 0x001c0001;				// CAN Bitrate: 2010000 (data for the logic analyser debug purposes)
 800023a:	4b05      	ldr	r3, [pc, #20]	; (8000250 <CanInit+0x4c>)
 800023c:	4a05      	ldr	r2, [pc, #20]	; (8000254 <CanInit+0x50>)
 800023e:	61da      	str	r2, [r3, #28]

	CAN->MCR &= ~CAN_MCR_SLEEP;
 8000240:	4b03      	ldr	r3, [pc, #12]	; (8000250 <CanInit+0x4c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a02      	ldr	r2, [pc, #8]	; (8000250 <CanInit+0x4c>)
 8000246:	f023 0302 	bic.w	r3, r3, #2
 800024a:	6013      	str	r3, [r2, #0]


}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40006400 	.word	0x40006400
 8000254:	001c0001 	.word	0x001c0001

08000258 <Can_Rx_Msg>:
	CAN->sTxMailBox[0].TIR |=  CAN_TI0R_TXRQ;       // transmit message

}


void Can_Rx_Msg(CAN_MESSAGE * msg) {
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]

	if ((CAN->sFIFOMailBox[0].RIR & CAN_ID_EXT) == 0) { // Standard ID
 8000260:	4b2e      	ldr	r3, [pc, #184]	; (800031c <Can_Rx_Msg+0xc4>)
 8000262:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->format = STANDARD_FORMAT;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2200      	movs	r2, #0
 800026a:	611a      	str	r2, [r3, #16]
	    msg->id     = (uint32_t)0x000007FF & (CAN->sFIFOMailBox[0].RIR >> 21);
 800026c:	4b2b      	ldr	r3, [pc, #172]	; (800031c <Can_Rx_Msg+0xc4>)
 800026e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000272:	0d5b      	lsrs	r3, r3, #21
 8000274:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	601a      	str	r2, [r3, #0]
	  }  else  {                                          // Extended ID
	    msg->format = EXTENDED_FORMAT;
	    msg->id     = (uint32_t)0x0003FFFF & (CAN->sFIFOMailBox[0].RIR >> 3);
	  }
	                                                  // Read type information
	  if ((CAN->sFIFOMailBox[0].RIR & CAN_RTR_REMOTE) == 0) {
 800027c:	4b27      	ldr	r3, [pc, #156]	; (800031c <Can_Rx_Msg+0xc4>)
 800027e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->type =   DATA_FRAME;                     // DATA   FRAME
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2200      	movs	r2, #0
 8000286:	615a      	str	r2, [r3, #20]
	  }  else  {
	    msg->type = REMOTE_FRAME;                     // REMOTE FRAME
	  }

	  msg->len = (char)0x0000000F & CAN->sFIFOMailBox[0].RDTR;
 8000288:	4b24      	ldr	r3, [pc, #144]	; (800031c <Can_Rx_Msg+0xc4>)
 800028a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800028e:	f003 020f 	and.w	r2, r3, #15
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	60da      	str	r2, [r3, #12]
	                                                    // Read data
	  msg->data[0] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDLR);
 8000296:	4b21      	ldr	r3, [pc, #132]	; (800031c <Can_Rx_Msg+0xc4>)
 8000298:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800029c:	b2da      	uxtb	r2, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	711a      	strb	r2, [r3, #4]
	  msg->data[1] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDLR >> 8);
 80002a2:	4b1e      	ldr	r3, [pc, #120]	; (800031c <Can_Rx_Msg+0xc4>)
 80002a4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80002a8:	0a1b      	lsrs	r3, r3, #8
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	715a      	strb	r2, [r3, #5]
	  msg->data[2] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDLR >> 16);
 80002b0:	4b1a      	ldr	r3, [pc, #104]	; (800031c <Can_Rx_Msg+0xc4>)
 80002b2:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80002b6:	0c1b      	lsrs	r3, r3, #16
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	719a      	strb	r2, [r3, #6]
	  msg->data[3] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDLR >> 24);
 80002be:	4b17      	ldr	r3, [pc, #92]	; (800031c <Can_Rx_Msg+0xc4>)
 80002c0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80002c4:	0e1b      	lsrs	r3, r3, #24
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	71da      	strb	r2, [r3, #7]

	  msg->data[4] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDHR);
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <Can_Rx_Msg+0xc4>)
 80002ce:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	721a      	strb	r2, [r3, #8]
	  msg->data[5] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDHR >> 8);
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <Can_Rx_Msg+0xc4>)
 80002da:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80002de:	0a1b      	lsrs	r3, r3, #8
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	725a      	strb	r2, [r3, #9]
	  msg->data[6] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDHR >> 16);
 80002e6:	4b0d      	ldr	r3, [pc, #52]	; (800031c <Can_Rx_Msg+0xc4>)
 80002e8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80002ec:	0c1b      	lsrs	r3, r3, #16
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	729a      	strb	r2, [r3, #10]
	  msg->data[7] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDHR >> 24);
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <Can_Rx_Msg+0xc4>)
 80002f6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	72da      	strb	r2, [r3, #11]

	  CAN->RF0R |= CAN_RF0R_RFOM0;                    // Release FIFO 0 output mailbox
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <Can_Rx_Msg+0xc4>)
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	4a05      	ldr	r2, [pc, #20]	; (800031c <Can_Rx_Msg+0xc4>)
 8000308:	f043 0320 	orr.w	r3, r3, #32
 800030c:	60d3      	str	r3, [r2, #12]

}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40006400 	.word	0x40006400

08000320 <CAN_TX_IRQHandler>:
	  CAN_filterIdx += 1;                             // increase filter index

}


__attribute__((interrupt)) void CAN_TX_IRQHandler (void)  {
 8000320:	4668      	mov	r0, sp
 8000322:	f020 0107 	bic.w	r1, r0, #7
 8000326:	468d      	mov	sp, r1
 8000328:	b481      	push	{r0, r7}
 800032a:	af00      	add	r7, sp, #0
	if (CAN->TSR & CAN_TSR_RQCP0) {                 // request completed mbx 0
 800032c:	4b0b      	ldr	r3, [pc, #44]	; (800035c <CAN_TX_IRQHandler+0x3c>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	2b00      	cmp	r3, #0
 8000336:	d00b      	beq.n	8000350 <CAN_TX_IRQHandler+0x30>
	    CAN->TSR |= CAN_TSR_RQCP0;                  // reset request complete mbx 0
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <CAN_TX_IRQHandler+0x3c>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	4a07      	ldr	r2, [pc, #28]	; (800035c <CAN_TX_IRQHandler+0x3c>)
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	6093      	str	r3, [r2, #8]
	    CAN->IER &= ~CAN_IER_TMEIE;                 // disable  TME interrupt
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <CAN_TX_IRQHandler+0x3c>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a04      	ldr	r2, [pc, #16]	; (800035c <CAN_TX_IRQHandler+0x3c>)
 800034a:	f023 0301 	bic.w	r3, r3, #1
 800034e:	6153      	str	r3, [r2, #20]
	}

// Tx Interrupt Action

}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc81      	pop	{r0, r7}
 8000356:	4685      	mov	sp, r0
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40006400 	.word	0x40006400

08000360 <CAN_RX0_IRQHandler>:



__attribute__((interrupt)) void CAN_RX0_IRQHandler (void) {
 8000360:	4668      	mov	r0, sp
 8000362:	f020 0107 	bic.w	r1, r0, #7
 8000366:	468d      	mov	sp, r1
 8000368:	b589      	push	{r0, r3, r7, lr}
 800036a:	af00      	add	r7, sp, #0

	if (CAN->RF0R & CAN_RF0R_FMP0) {			      // message pending ?
 800036c:	4b07      	ldr	r3, [pc, #28]	; (800038c <CAN_RX0_IRQHandler+0x2c>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	f003 0303 	and.w	r3, r3, #3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d002      	beq.n	800037e <CAN_RX0_IRQHandler+0x1e>
		Can_Rx_Msg(&can_rx_message);                  // read the message
 8000378:	4805      	ldr	r0, [pc, #20]	; (8000390 <CAN_RX0_IRQHandler+0x30>)
 800037a:	f7ff ff6d 	bl	8000258 <Can_Rx_Msg>
	}


}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 8000386:	4685      	mov	sp, r0
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40006400 	.word	0x40006400
 8000390:	2000001c 	.word	0x2000001c

08000394 <SystemCFG>:
 *      Author: Michal Makowka
 */
#include "config.h"


void SystemCFG (void) {
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0

	// RCC clock EN configuration
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN;	// GPIO Clk Enable
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <SystemCFG+0x54>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <SystemCFG+0x54>)
 800039e:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80003a2:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_CANEN;												// CAN Clk Enable
 80003a4:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <SystemCFG+0x54>)
 80003a6:	69db      	ldr	r3, [r3, #28]
 80003a8:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <SystemCFG+0x54>)
 80003aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ae:	61d3      	str	r3, [r2, #28]

	// Status LEDs GPIO config
	GPIOC->MODER |= GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0 | GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0;	// GPIO Output mode
 80003b0:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <SystemCFG+0x58>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0d      	ldr	r2, [pc, #52]	; (80003ec <SystemCFG+0x58>)
 80003b6:	f443 23aa 	orr.w	r3, r3, #348160	; 0x55000
 80003ba:	6013      	str	r3, [r2, #0]
	// CAN bus GPIO config
	GPIOA->MODER |= GPIO_MODER_MODER11_1 | GPIO_MODER_MODER12_1;	// GPIO Alternative Mode (CANbx)
 80003bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003c6:	f043 7320 	orr.w	r3, r3, #41943040	; 0x2800000
 80003ca:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= (0b1001 << 12) | (0b1001 << 16);	// PA11 and PA12 AF set to CAN_Tx and CAN_Rx
 80003cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003d6:	f443 2319 	orr.w	r3, r3, #626688	; 0x99000
 80003da:	6253      	str	r3, [r2, #36]	; 0x24

}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000
 80003ec:	48000800 	.word	0x48000800

080003f0 <main>:




int main(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0

	SystemCFG();	// Configure essential registers
 80003f4:	f7ff ffce 	bl	8000394 <SystemCFG>
	CanInit();
 80003f8:	f7ff ff04 	bl	8000204 <CanInit>


  while (1)
 80003fc:	e7fe      	b.n	80003fc <main+0xc>
	...

08000400 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <SystemInit+0x20>)
 8000406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800040a:	4a05      	ldr	r2, [pc, #20]	; (8000420 <SystemInit+0x20>)
 800040c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	e000ed00 	.word	0xe000ed00

08000424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800045c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000428:	480d      	ldr	r0, [pc, #52]	; (8000460 <LoopForever+0x6>)
  ldr r1, =_edata
 800042a:	490e      	ldr	r1, [pc, #56]	; (8000464 <LoopForever+0xa>)
  ldr r2, =_sidata
 800042c:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <LoopForever+0xe>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0b      	ldr	r2, [pc, #44]	; (800046c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000440:	4c0b      	ldr	r4, [pc, #44]	; (8000470 <LoopForever+0x16>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800044e:	f7ff ffd7 	bl	8000400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000452:	f000 f811 	bl	8000478 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000456:	f7ff ffcb 	bl	80003f0 <main>

0800045a <LoopForever>:

LoopForever:
    b LoopForever
 800045a:	e7fe      	b.n	800045a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800045c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000464:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000468:	080004e0 	.word	0x080004e0
  ldr r2, =_sbss
 800046c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000470:	20000034 	.word	0x20000034

08000474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC1_2_IRQHandler>
	...

08000478 <__libc_init_array>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	4e0d      	ldr	r6, [pc, #52]	; (80004b0 <__libc_init_array+0x38>)
 800047c:	4c0d      	ldr	r4, [pc, #52]	; (80004b4 <__libc_init_array+0x3c>)
 800047e:	1ba4      	subs	r4, r4, r6
 8000480:	10a4      	asrs	r4, r4, #2
 8000482:	2500      	movs	r5, #0
 8000484:	42a5      	cmp	r5, r4
 8000486:	d109      	bne.n	800049c <__libc_init_array+0x24>
 8000488:	4e0b      	ldr	r6, [pc, #44]	; (80004b8 <__libc_init_array+0x40>)
 800048a:	4c0c      	ldr	r4, [pc, #48]	; (80004bc <__libc_init_array+0x44>)
 800048c:	f000 f818 	bl	80004c0 <_init>
 8000490:	1ba4      	subs	r4, r4, r6
 8000492:	10a4      	asrs	r4, r4, #2
 8000494:	2500      	movs	r5, #0
 8000496:	42a5      	cmp	r5, r4
 8000498:	d105      	bne.n	80004a6 <__libc_init_array+0x2e>
 800049a:	bd70      	pop	{r4, r5, r6, pc}
 800049c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004a0:	4798      	blx	r3
 80004a2:	3501      	adds	r5, #1
 80004a4:	e7ee      	b.n	8000484 <__libc_init_array+0xc>
 80004a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004aa:	4798      	blx	r3
 80004ac:	3501      	adds	r5, #1
 80004ae:	e7f2      	b.n	8000496 <__libc_init_array+0x1e>
 80004b0:	080004d8 	.word	0x080004d8
 80004b4:	080004d8 	.word	0x080004d8
 80004b8:	080004d8 	.word	0x080004d8
 80004bc:	080004dc 	.word	0x080004dc

080004c0 <_init>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr

080004cc <_fini>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	bf00      	nop
 80004d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d2:	bc08      	pop	{r3}
 80004d4:	469e      	mov	lr, r3
 80004d6:	4770      	bx	lr
