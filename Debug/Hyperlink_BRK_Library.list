
Hyperlink_BRK_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08000cc8  08000cc8  00010cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dfc  08000dfc  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08000dfc  08000dfc  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dfc  08000dfc  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dfc  08000dfc  00010dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e00  08000e00  00010e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08000e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  200001d0  08000fd4  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08000fd4  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ec1  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007d8  00000000  00000000  000230c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000100  00000000  00000000  000238a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b8  00000000  00000000  000239a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000141d0  00000000  00000000  00023a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000019d9  00000000  00000000  00037c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00069ec0  00000000  00000000  00039601  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a34c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004a4  00000000  00000000  000a353c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d0 	.word	0x200001d0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000cb0 	.word	0x08000cb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d4 	.word	0x200001d4
 80001c4:	08000cb0 	.word	0x08000cb0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	db0b      	blt.n	8000206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	f003 021f 	and.w	r2, r3, #31
 80001f4:	4907      	ldr	r1, [pc, #28]	; (8000214 <__NVIC_EnableIRQ+0x38>)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	095b      	lsrs	r3, r3, #5
 80001fc:	2001      	movs	r0, #1
 80001fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e100 	.word	0xe000e100

08000218 <CanInit>:
 */

#include "can.h"


void CanInit(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0


	CAN->MCR |= CAN_MCR_INRQ;			// Initialisation mode on
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <CanInit+0x58>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a13      	ldr	r2, [pc, #76]	; (8000270 <CanInit+0x58>)
 8000222:	f043 0301 	orr.w	r3, r3, #1
 8000226:	6013      	str	r3, [r2, #0]

	// *** CAN Test Mode *** //
//	CAN1->BTR |= CAN_BTR_LBKM;			// Loopback mode enabled (For Debug purposes)
	// ********************* //

	NVIC_EnableIRQ(CAN_TX_IRQn);
 8000228:	2013      	movs	r0, #19
 800022a:	f7ff ffd7 	bl	80001dc <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(CAN_RX0_IRQn);
 800022e:	2014      	movs	r0, #20
 8000230:	f7ff ffd4 	bl	80001dc <__NVIC_EnableIRQ>

	CAN->IER |= CAN_IER_FMPIE0;			// FIFO message pending interrupt enable
 8000234:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <CanInit+0x58>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <CanInit+0x58>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6153      	str	r3, [r2, #20]

	CAN->BTR = 0x00070004;				// CAN Bitrate: 2010000 (data for the logic analyser debug purposes)
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <CanInit+0x58>)
 8000242:	4a0c      	ldr	r2, [pc, #48]	; (8000274 <CanInit+0x5c>)
 8000244:	61da      	str	r2, [r3, #28]

	CAN->MCR &= ~CAN_MCR_INRQ;			// Initialisation mode off
 8000246:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <CanInit+0x58>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a09      	ldr	r2, [pc, #36]	; (8000270 <CanInit+0x58>)
 800024c:	f023 0301 	bic.w	r3, r3, #1
 8000250:	6013      	str	r3, [r2, #0]
	while (CAN->MSR & CAN_MCR_INRQ);
 8000252:	bf00      	nop
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <CanInit+0x58>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	f003 0301 	and.w	r3, r3, #1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d1f9      	bne.n	8000254 <CanInit+0x3c>



	CAN->MCR &= ~CAN_MCR_SLEEP;
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <CanInit+0x58>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a02      	ldr	r2, [pc, #8]	; (8000270 <CanInit+0x58>)
 8000266:	f023 0302 	bic.w	r3, r3, #2
 800026a:	6013      	str	r3, [r2, #0]


}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40006400 	.word	0x40006400
 8000274:	00070004 	.word	0x00070004

08000278 <Can_Tx_Msg>:


void Can_Tx_Msg(CAN_MESSAGE * msg) {
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]

	CAN->sTxMailBox[0].TIR = 0;		// Empty TIR register
 8000280:	4b3c      	ldr	r3, [pc, #240]	; (8000374 <Can_Tx_Msg+0xfc>)
 8000282:	2200      	movs	r2, #0
 8000284:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	if(msg->format == STANDARD_FORMAT)	{
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d10a      	bne.n	80002a6 <Can_Tx_Msg+0x2e>
		CAN->sTxMailBox[0].TIR |= (u_int) (msg->id << 21) | CAN_ID_STD;
 8000290:	4b38      	ldr	r3, [pc, #224]	; (8000374 <Can_Tx_Msg+0xfc>)
 8000292:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	055b      	lsls	r3, r3, #21
 800029c:	4935      	ldr	r1, [pc, #212]	; (8000374 <Can_Tx_Msg+0xfc>)
 800029e:	4313      	orrs	r3, r2
 80002a0:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
 80002a4:	e009      	b.n	80002ba <Can_Tx_Msg+0x42>
	} else {
		CAN->sTxMailBox[0].TIR |= (u_int) (msg->id << 3) | CAN_ID_EXT;
 80002a6:	4b33      	ldr	r3, [pc, #204]	; (8000374 <Can_Tx_Msg+0xfc>)
 80002a8:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	00db      	lsls	r3, r3, #3
 80002b2:	4930      	ldr	r1, [pc, #192]	; (8000374 <Can_Tx_Msg+0xfc>)
 80002b4:	4313      	orrs	r3, r2
 80002b6:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
	}

	if (msg->type == DATA_FRAME)  {                 // DATA FRAME
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d106      	bne.n	80002d0 <Can_Tx_Msg+0x58>
	    CAN->sTxMailBox[0].TIR |= CAN_RTR_DATA;
 80002c2:	4b2c      	ldr	r3, [pc, #176]	; (8000374 <Can_Tx_Msg+0xfc>)
 80002c4:	4a2b      	ldr	r2, [pc, #172]	; (8000374 <Can_Tx_Msg+0xfc>)
 80002c6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80002ca:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 80002ce:	e005      	b.n	80002dc <Can_Tx_Msg+0x64>
	} else {                                        // REMOTE FRAME
	    CAN->sTxMailBox[0].TIR |= CAN_RTR_REMOTE;
 80002d0:	4b28      	ldr	r3, [pc, #160]	; (8000374 <Can_Tx_Msg+0xfc>)
 80002d2:	4a28      	ldr	r2, [pc, #160]	; (8000374 <Can_Tx_Msg+0xfc>)
 80002d4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80002d8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	}

	CAN->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	79db      	ldrb	r3, [r3, #7]
 80002e0:	061a      	lsls	r2, r3, #24
	                          ((u_int)msg->data[2] << 16) |
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	799b      	ldrb	r3, [r3, #6]
 80002e6:	041b      	lsls	r3, r3, #16
	CAN->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 80002e8:	431a      	orrs	r2, r3
	                          ((u_int)msg->data[1] <<  8) |
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	795b      	ldrb	r3, [r3, #5]
 80002ee:	021b      	lsls	r3, r3, #8
	                          ((u_int)msg->data[2] << 16) |
 80002f0:	4313      	orrs	r3, r2
	                          ((u_int)msg->data[0]));
 80002f2:	687a      	ldr	r2, [r7, #4]
 80002f4:	7912      	ldrb	r2, [r2, #4]
 80002f6:	4611      	mov	r1, r2
	CAN->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 80002f8:	4a1e      	ldr	r2, [pc, #120]	; (8000374 <Can_Tx_Msg+0xfc>)
	                          ((u_int)msg->data[1] <<  8) |
 80002fa:	430b      	orrs	r3, r1
	CAN->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 80002fc:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
	CAN->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	7adb      	ldrb	r3, [r3, #11]
 8000304:	061a      	lsls	r2, r3, #24
	                          ((u_int)msg->data[6] << 16) |
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	7a9b      	ldrb	r3, [r3, #10]
 800030a:	041b      	lsls	r3, r3, #16
	CAN->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 800030c:	431a      	orrs	r2, r3
	                          ((u_int)msg->data[5] <<  8) |
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	7a5b      	ldrb	r3, [r3, #9]
 8000312:	021b      	lsls	r3, r3, #8
	                          ((u_int)msg->data[6] << 16) |
 8000314:	4313      	orrs	r3, r2
	                          ((u_int)msg->data[4]));
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	7a12      	ldrb	r2, [r2, #8]
 800031a:	4611      	mov	r1, r2
	CAN->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 800031c:	4a15      	ldr	r2, [pc, #84]	; (8000374 <Can_Tx_Msg+0xfc>)
	                          ((u_int)msg->data[5] <<  8) |
 800031e:	430b      	orrs	r3, r1
	CAN->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 8000320:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c

	CAN->sTxMailBox[0].TDTR &= ~CAN_TDT1R_DLC;
 8000324:	4b13      	ldr	r3, [pc, #76]	; (8000374 <Can_Tx_Msg+0xfc>)
 8000326:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800032a:	4a12      	ldr	r2, [pc, #72]	; (8000374 <Can_Tx_Msg+0xfc>)
 800032c:	f023 030f 	bic.w	r3, r3, #15
 8000330:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	CAN->sTxMailBox[0].TDTR |=  (msg->len & CAN_TDT0R_DLC);
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <Can_Tx_Msg+0xfc>)
 8000336:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	f003 030f 	and.w	r3, r3, #15
 8000342:	490c      	ldr	r1, [pc, #48]	; (8000374 <Can_Tx_Msg+0xfc>)
 8000344:	4313      	orrs	r3, r2
 8000346:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184

	CAN->IER |= CAN_IER_TMEIE;                      // enable  TME interrupt
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <Can_Tx_Msg+0xfc>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a09      	ldr	r2, [pc, #36]	; (8000374 <Can_Tx_Msg+0xfc>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6153      	str	r3, [r2, #20]
	CAN->sTxMailBox[0].TIR |=  CAN_TI0R_TXRQ;       // transmit message
 8000356:	4b07      	ldr	r3, [pc, #28]	; (8000374 <Can_Tx_Msg+0xfc>)
 8000358:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800035c:	4a05      	ldr	r2, [pc, #20]	; (8000374 <Can_Tx_Msg+0xfc>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40006400 	.word	0x40006400

08000378 <Can_Rx_Msg>:


void Can_Rx_Msg(CAN_MESSAGE * msg) {
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]

	if ((CAN->sFIFOMailBox[0].RIR & CAN_ID_EXT) == 0) { // Standard ID
 8000380:	4b2e      	ldr	r3, [pc, #184]	; (800043c <Can_Rx_Msg+0xc4>)
 8000382:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->format = STANDARD_FORMAT;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
	    msg->id     = (uint32_t)0x000007FF & (CAN->sFIFOMailBox[0].RIR >> 21);
 800038c:	4b2b      	ldr	r3, [pc, #172]	; (800043c <Can_Rx_Msg+0xc4>)
 800038e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000392:	0d5b      	lsrs	r3, r3, #21
 8000394:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	601a      	str	r2, [r3, #0]
	  }  else  {                                          // Extended ID
	    msg->format = EXTENDED_FORMAT;
	    msg->id     = (uint32_t)0x0003FFFF & (CAN->sFIFOMailBox[0].RIR >> 3);
	  }
	                                                  // Read type information
	  if ((CAN->sFIFOMailBox[0].RIR & CAN_RTR_REMOTE) == 0) {
 800039c:	4b27      	ldr	r3, [pc, #156]	; (800043c <Can_Rx_Msg+0xc4>)
 800039e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->type =   DATA_FRAME;                     // DATA   FRAME
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
	  }  else  {
	    msg->type = REMOTE_FRAME;                     // REMOTE FRAME
	  }

	  msg->len = (char)0x0000000F & CAN->sFIFOMailBox[0].RDTR;
 80003a8:	4b24      	ldr	r3, [pc, #144]	; (800043c <Can_Rx_Msg+0xc4>)
 80003aa:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80003ae:	f003 020f 	and.w	r2, r3, #15
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	60da      	str	r2, [r3, #12]
	                                                    // Read data
	  msg->data[0] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDLR);
 80003b6:	4b21      	ldr	r3, [pc, #132]	; (800043c <Can_Rx_Msg+0xc4>)
 80003b8:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	711a      	strb	r2, [r3, #4]
	  msg->data[1] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDLR >> 8);
 80003c2:	4b1e      	ldr	r3, [pc, #120]	; (800043c <Can_Rx_Msg+0xc4>)
 80003c4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003c8:	0a1b      	lsrs	r3, r3, #8
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	715a      	strb	r2, [r3, #5]
	  msg->data[2] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDLR >> 16);
 80003d0:	4b1a      	ldr	r3, [pc, #104]	; (800043c <Can_Rx_Msg+0xc4>)
 80003d2:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003d6:	0c1b      	lsrs	r3, r3, #16
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	719a      	strb	r2, [r3, #6]
	  msg->data[3] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDLR >> 24);
 80003de:	4b17      	ldr	r3, [pc, #92]	; (800043c <Can_Rx_Msg+0xc4>)
 80003e0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003e4:	0e1b      	lsrs	r3, r3, #24
 80003e6:	b2da      	uxtb	r2, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	71da      	strb	r2, [r3, #7]

	  msg->data[4] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDHR);
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <Can_Rx_Msg+0xc4>)
 80003ee:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	721a      	strb	r2, [r3, #8]
	  msg->data[5] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDHR >> 8);
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <Can_Rx_Msg+0xc4>)
 80003fa:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80003fe:	0a1b      	lsrs	r3, r3, #8
 8000400:	b2da      	uxtb	r2, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	725a      	strb	r2, [r3, #9]
	  msg->data[6] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDHR >> 16);
 8000406:	4b0d      	ldr	r3, [pc, #52]	; (800043c <Can_Rx_Msg+0xc4>)
 8000408:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800040c:	0c1b      	lsrs	r3, r3, #16
 800040e:	b2da      	uxtb	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	729a      	strb	r2, [r3, #10]
	  msg->data[7] = (u_int)0x000000FF & (CAN->sFIFOMailBox[0].RDHR >> 24);
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <Can_Rx_Msg+0xc4>)
 8000416:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800041a:	0e1b      	lsrs	r3, r3, #24
 800041c:	b2da      	uxtb	r2, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	72da      	strb	r2, [r3, #11]

	  CAN->RF0R |= CAN_RF0R_RFOM0;                    // Release FIFO 0 output mailbox
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <Can_Rx_Msg+0xc4>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	4a05      	ldr	r2, [pc, #20]	; (800043c <Can_Rx_Msg+0xc4>)
 8000428:	f043 0320 	orr.w	r3, r3, #32
 800042c:	60d3      	str	r3, [r2, #12]

}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40006400 	.word	0x40006400

08000440 <Can_Set_Filter>:


void Can_Set_Filter(uint id, char format) {
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	70fb      	strb	r3, [r7, #3]

	static unsigned short CAN_filterIdx = 0;
	uint CAN_msgId = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]

	  if (CAN_filterIdx > 13) {                       // check if Filter Memory is full
 8000450:	4b3f      	ldr	r3, [pc, #252]	; (8000550 <Can_Set_Filter+0x110>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	2b0d      	cmp	r3, #13
 8000456:	d874      	bhi.n	8000542 <Can_Set_Filter+0x102>
	    return;
	  }
	                                                  // Setup identifier information
	  if (format == STANDARD_FORMAT)  {               // Standard ID
 8000458:	78fb      	ldrb	r3, [r7, #3]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d105      	bne.n	800046a <Can_Set_Filter+0x2a>
	      CAN_msgId  |= (unsigned int)(id << 21) | CAN_ID_STD;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	055b      	lsls	r3, r3, #21
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	4313      	orrs	r3, r2
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e004      	b.n	8000474 <Can_Set_Filter+0x34>
	  }  else  {                                      // Extended ID
	      CAN_msgId  |= (unsigned int)(id <<  3) | CAN_ID_EXT;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	00db      	lsls	r3, r3, #3
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	4313      	orrs	r3, r2
 8000472:	60fb      	str	r3, [r7, #12]
	  }

	  CAN->FMR  |=  CAN_FMR_FINIT;                    // set Initialisation mode for filter banks
 8000474:	4b37      	ldr	r3, [pc, #220]	; (8000554 <Can_Set_Filter+0x114>)
 8000476:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800047a:	4a36      	ldr	r2, [pc, #216]	; (8000554 <Can_Set_Filter+0x114>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	  CAN->FA1R &=  ~(unsigned int)(1 << CAN_filterIdx); // deactivate filter
 8000484:	4b33      	ldr	r3, [pc, #204]	; (8000554 <Can_Set_Filter+0x114>)
 8000486:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800048a:	4b31      	ldr	r3, [pc, #196]	; (8000550 <Can_Set_Filter+0x110>)
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	4619      	mov	r1, r3
 8000490:	2301      	movs	r3, #1
 8000492:	408b      	lsls	r3, r1
 8000494:	43db      	mvns	r3, r3
 8000496:	492f      	ldr	r1, [pc, #188]	; (8000554 <Can_Set_Filter+0x114>)
 8000498:	4013      	ands	r3, r2
 800049a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	                                                  // initialize filter
	  CAN->FS1R |= (unsigned int)(1 << CAN_filterIdx);// set 32-bit scale configuration
 800049e:	4b2d      	ldr	r3, [pc, #180]	; (8000554 <Can_Set_Filter+0x114>)
 80004a0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80004a4:	4a2a      	ldr	r2, [pc, #168]	; (8000550 <Can_Set_Filter+0x110>)
 80004a6:	8812      	ldrh	r2, [r2, #0]
 80004a8:	4611      	mov	r1, r2
 80004aa:	2201      	movs	r2, #1
 80004ac:	408a      	lsls	r2, r1
 80004ae:	4611      	mov	r1, r2
 80004b0:	4a28      	ldr	r2, [pc, #160]	; (8000554 <Can_Set_Filter+0x114>)
 80004b2:	430b      	orrs	r3, r1
 80004b4:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	  CAN->FM1R |= (unsigned int)(1 << CAN_filterIdx);// set 2 32-bit identifier list mode
 80004b8:	4b26      	ldr	r3, [pc, #152]	; (8000554 <Can_Set_Filter+0x114>)
 80004ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004be:	4a24      	ldr	r2, [pc, #144]	; (8000550 <Can_Set_Filter+0x110>)
 80004c0:	8812      	ldrh	r2, [r2, #0]
 80004c2:	4611      	mov	r1, r2
 80004c4:	2201      	movs	r2, #1
 80004c6:	408a      	lsls	r2, r1
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a22      	ldr	r2, [pc, #136]	; (8000554 <Can_Set_Filter+0x114>)
 80004cc:	430b      	orrs	r3, r1
 80004ce:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	  CAN->sFilterRegister[CAN_filterIdx].FR1 = CAN_msgId; //  32-bit identifier
 80004d2:	4920      	ldr	r1, [pc, #128]	; (8000554 <Can_Set_Filter+0x114>)
 80004d4:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <Can_Set_Filter+0x110>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	3348      	adds	r3, #72	; 0x48
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	  CAN->sFilterRegister[CAN_filterIdx].FR2 = CAN_msgId; //  32-bit identifier
 80004e0:	4a1c      	ldr	r2, [pc, #112]	; (8000554 <Can_Set_Filter+0x114>)
 80004e2:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <Can_Set_Filter+0x110>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	3348      	adds	r3, #72	; 0x48
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	4413      	add	r3, r2
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	605a      	str	r2, [r3, #4]

	  CAN->FFA1R &= ~(unsigned int)(1 << CAN_filterIdx);  // assign filter to FIFO 0
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <Can_Set_Filter+0x114>)
 80004f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <Can_Set_Filter+0x110>)
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	4619      	mov	r1, r3
 80004fc:	2301      	movs	r3, #1
 80004fe:	408b      	lsls	r3, r1
 8000500:	43db      	mvns	r3, r3
 8000502:	4914      	ldr	r1, [pc, #80]	; (8000554 <Can_Set_Filter+0x114>)
 8000504:	4013      	ands	r3, r2
 8000506:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
	  CAN->FA1R  |=  (unsigned int)(1 << CAN_filterIdx);  // activate filter
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <Can_Set_Filter+0x114>)
 800050c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000510:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <Can_Set_Filter+0x110>)
 8000512:	8812      	ldrh	r2, [r2, #0]
 8000514:	4611      	mov	r1, r2
 8000516:	2201      	movs	r2, #1
 8000518:	408a      	lsls	r2, r1
 800051a:	4611      	mov	r1, r2
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <Can_Set_Filter+0x114>)
 800051e:	430b      	orrs	r3, r1
 8000520:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	  CAN->FMR &= ~CAN_FMR_FINIT;                     // reset Initialisation mode for filter banks
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <Can_Set_Filter+0x114>)
 8000526:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <Can_Set_Filter+0x114>)
 800052c:	f023 0301 	bic.w	r3, r3, #1
 8000530:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	  CAN_filterIdx += 1;                             // increase filter index
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <Can_Set_Filter+0x110>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	b29a      	uxth	r2, r3
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <Can_Set_Filter+0x110>)
 800053e:	801a      	strh	r2, [r3, #0]
 8000540:	e000      	b.n	8000544 <Can_Set_Filter+0x104>
	    return;
 8000542:	bf00      	nop

}
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	200001ec 	.word	0x200001ec
 8000554:	40006400 	.word	0x40006400

08000558 <CAN_TX_IRQHandler>:


__attribute__((interrupt)) void CAN_TX_IRQHandler (void)  {
 8000558:	4668      	mov	r0, sp
 800055a:	f020 0107 	bic.w	r1, r0, #7
 800055e:	468d      	mov	sp, r1
 8000560:	b481      	push	{r0, r7}
 8000562:	af00      	add	r7, sp, #0
	if (CAN->TSR & CAN_TSR_RQCP0) {                 // request completed mbx 0
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <CAN_TX_IRQHandler+0x3c>)
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	2b00      	cmp	r3, #0
 800056e:	d00b      	beq.n	8000588 <CAN_TX_IRQHandler+0x30>
	    CAN->TSR |= CAN_TSR_RQCP0;                  // reset request complete mbx 0
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <CAN_TX_IRQHandler+0x3c>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <CAN_TX_IRQHandler+0x3c>)
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	6093      	str	r3, [r2, #8]
	    CAN->IER &= ~CAN_IER_TMEIE;                 // disable  TME interrupt
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <CAN_TX_IRQHandler+0x3c>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <CAN_TX_IRQHandler+0x3c>)
 8000582:	f023 0301 	bic.w	r3, r3, #1
 8000586:	6153      	str	r3, [r2, #20]
	}

	// Tx Interrupt Action (insert relevant code if needed)

}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	bc81      	pop	{r0, r7}
 800058e:	4685      	mov	sp, r0
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40006400 	.word	0x40006400

08000598 <CAN_RX0_IRQHandler>:



__attribute__((interrupt)) void CAN_RX0_IRQHandler (void) {
 8000598:	4668      	mov	r0, sp
 800059a:	f020 0107 	bic.w	r1, r0, #7
 800059e:	468d      	mov	sp, r1
 80005a0:	b589      	push	{r0, r3, r7, lr}
 80005a2:	af00      	add	r7, sp, #0

	if (CAN->RF0R & CAN_RF0R_FMP0) {			      // message pending ?
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <CAN_RX0_IRQHandler+0x2c>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	f003 0303 	and.w	r3, r3, #3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d002      	beq.n	80005b6 <CAN_RX0_IRQHandler+0x1e>
		Can_Rx_Msg(&can_rx_message);                  // read the message
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <CAN_RX0_IRQHandler+0x30>)
 80005b2:	f7ff fee1 	bl	8000378 <Can_Rx_Msg>
	}

}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 80005be:	4685      	mov	sp, r0
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40006400 	.word	0x40006400
 80005c8:	200001f0 	.word	0x200001f0

080005cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	6039      	str	r1, [r7, #0]
 80005d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	db0a      	blt.n	80005f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	490c      	ldr	r1, [pc, #48]	; (8000618 <__NVIC_SetPriority+0x4c>)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	0112      	lsls	r2, r2, #4
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	440b      	add	r3, r1
 80005f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f4:	e00a      	b.n	800060c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4908      	ldr	r1, [pc, #32]	; (800061c <__NVIC_SetPriority+0x50>)
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f003 030f 	and.w	r3, r3, #15
 8000602:	3b04      	subs	r3, #4
 8000604:	0112      	lsls	r2, r2, #4
 8000606:	b2d2      	uxtb	r2, r2
 8000608:	440b      	add	r3, r1
 800060a:	761a      	strb	r2, [r3, #24]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000e100 	.word	0xe000e100
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3b01      	subs	r3, #1
 800062c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000630:	d301      	bcc.n	8000636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000632:	2301      	movs	r3, #1
 8000634:	e00f      	b.n	8000656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <SysTick_Config+0x40>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3b01      	subs	r3, #1
 800063c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800063e:	210f      	movs	r1, #15
 8000640:	f04f 30ff 	mov.w	r0, #4294967295
 8000644:	f7ff ffc2 	bl	80005cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <SysTick_Config+0x40>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800064e:	4b04      	ldr	r3, [pc, #16]	; (8000660 <SysTick_Config+0x40>)
 8000650:	2207      	movs	r2, #7
 8000652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	e000e010 	.word	0xe000e010

08000664 <SystemCFG>:
 *      Author: Michal Makowka
 */
#include "config.h"


void SystemCFG (void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0


	// *** Configure System Clock (36MHz for each system BUS) ***
	RCC->CFGR |= RCC_CFGR_PLLMUL9;		// PLL Mult = X9
 8000668:	4b44      	ldr	r3, [pc, #272]	; (800077c <SystemCFG+0x118>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	4a43      	ldr	r2, [pc, #268]	; (800077c <SystemCFG+0x118>)
 800066e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000672:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;				// System Clock MUX switched to PLL
 8000674:	4b41      	ldr	r3, [pc, #260]	; (800077c <SystemCFG+0x118>)
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	4a40      	ldr	r2, [pc, #256]	; (800077c <SystemCFG+0x118>)
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV2;		// AHB DIV = /2
 8000680:	4b3e      	ldr	r3, [pc, #248]	; (800077c <SystemCFG+0x118>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	4a3d      	ldr	r2, [pc, #244]	; (800077c <SystemCFG+0x118>)
 8000686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800068a:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV1 << RCC_CFGR_PPRE1_Pos);	// PLL PPRE1 = /1
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <SystemCFG+0x118>)
 800068e:	4a3b      	ldr	r2, [pc, #236]	; (800077c <SystemCFG+0x118>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_SW_PLL << RCC_CFGR_SW_Pos);
 8000694:	4b39      	ldr	r3, [pc, #228]	; (800077c <SystemCFG+0x118>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4a38      	ldr	r2, [pc, #224]	; (800077c <SystemCFG+0x118>)
 800069a:	f043 0302 	orr.w	r3, r3, #2
 800069e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_PLLSRC_HSE_PREDIV);
 80006a0:	4b36      	ldr	r3, [pc, #216]	; (800077c <SystemCFG+0x118>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	4a35      	ldr	r2, [pc, #212]	; (800077c <SystemCFG+0x118>)
 80006a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006aa:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_HSEON;	// HSE ON
 80006ac:	4b33      	ldr	r3, [pc, #204]	; (800077c <SystemCFG+0x118>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <SystemCFG+0x118>)
 80006b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006b6:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); // Wait for HSE ON
 80006b8:	bf00      	nop
 80006ba:	4b30      	ldr	r3, [pc, #192]	; (800077c <SystemCFG+0x118>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0f9      	beq.n	80006ba <SystemCFG+0x56>
	RCC->CR |= RCC_CR_PLLON;	// PLL ON
 80006c6:	4b2d      	ldr	r3, [pc, #180]	; (800077c <SystemCFG+0x118>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a2c      	ldr	r2, [pc, #176]	; (800077c <SystemCFG+0x118>)
 80006cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006d0:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLRDY)); // Check if PLL not locked
 80006d2:	bf00      	nop
 80006d4:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemCFG+0x118>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f9      	bne.n	80006d4 <SystemCFG+0x70>
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <SystemCFG+0x11c>)
 80006e2:	2212      	movs	r2, #18
 80006e4:	601a      	str	r2, [r3, #0]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Check for a correct source set
 80006e6:	bf00      	nop
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <SystemCFG+0x118>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	f003 030c 	and.w	r3, r3, #12
 80006f0:	2b08      	cmp	r3, #8
 80006f2:	d1f9      	bne.n	80006e8 <SystemCFG+0x84>
	RCC->CR &= ~RCC_CR_HSION;	// 8MHz HSI OFF
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <SystemCFG+0x118>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a20      	ldr	r2, [pc, #128]	; (800077c <SystemCFG+0x118>)
 80006fa:	f023 0301 	bic.w	r3, r3, #1
 80006fe:	6013      	str	r3, [r2, #0]


	// RCC clock EN configuration
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN;	// GPIO Clk Enable
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <SystemCFG+0x118>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4a1d      	ldr	r2, [pc, #116]	; (800077c <SystemCFG+0x118>)
 8000706:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 800070a:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_CANEN;												// CAN Clk Enable
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <SystemCFG+0x118>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	4a1a      	ldr	r2, [pc, #104]	; (800077c <SystemCFG+0x118>)
 8000712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000716:	61d3      	str	r3, [r2, #28]

	// Status LEDs GPIO config
	GPIOC->MODER |= GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0 | GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0;	// GPIO Output mode
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <SystemCFG+0x120>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a19      	ldr	r2, [pc, #100]	; (8000784 <SystemCFG+0x120>)
 800071e:	f443 23aa 	orr.w	r3, r3, #348160	; 0x55000
 8000722:	6013      	str	r3, [r2, #0]
	// CAN bus GPIO config
	GPIOA->MODER |= GPIO_MODER_MODER11_1 | GPIO_MODER_MODER12_1;	// GPIO Alternative Mode (CANbx)
 8000724:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800072e:	f043 7320 	orr.w	r3, r3, #41943040	; 0x2800000
 8000732:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= (0b1001 << 12) | (0b1001 << 16);	// PA11 and PA12 AF set to CAN_Tx and CAN_Rx
 8000734:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800073e:	f443 2319 	orr.w	r3, r3, #626688	; 0x99000
 8000742:	6253      	str	r3, [r2, #36]	; 0x24

	// Motor Pins set as output
	GPIOA->MODER |= GPIO_MODER_MODER7_0;
 8000744:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER13_0 | GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <SystemCFG+0x124>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <SystemCFG+0x124>)
 800075a:	f043 43a8 	orr.w	r3, r3, #1409286144	; 0x54000000
 800075e:	f043 0305 	orr.w	r3, r3, #5
 8000762:	6013      	str	r3, [r2, #0]

	SysTick_Config(32000000 / 1000);
 8000764:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000768:	f7ff ff5a 	bl	8000620 <SysTick_Config>
	// Reset the SysTick counter value.
	SysTick->VAL = 0UL;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <SystemCFG+0x128>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
	// Set SysTick source and IRQ.
	SysTick->CTRL = (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk);
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <SystemCFG+0x128>)
 8000774:	2206      	movs	r2, #6
 8000776:	601a      	str	r2, [r3, #0]
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	40022000 	.word	0x40022000
 8000784:	48000800 	.word	0x48000800
 8000788:	48000400 	.word	0x48000400
 800078c:	e000e010 	.word	0xe000e010

08000790 <delay_ms>:

void delay_ms(uint16_t ms) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]
	// Enable the SysTick timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <delay_ms+0x44>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a0d      	ldr	r2, [pc, #52]	; (80007d4 <delay_ms+0x44>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6013      	str	r3, [r2, #0]

	// Wait for a specified number of milliseconds
	delay = 0;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <delay_ms+0x48>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	801a      	strh	r2, [r3, #0]
	while (delay < ms);
 80007ac:	bf00      	nop
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <delay_ms+0x48>)
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	88fa      	ldrh	r2, [r7, #6]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d8f9      	bhi.n	80007ae <delay_ms+0x1e>

	// Disable the SysTick timer
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <delay_ms+0x44>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a05      	ldr	r2, [pc, #20]	; (80007d4 <delay_ms+0x44>)
 80007c0:	f023 0301 	bic.w	r3, r3, #1
 80007c4:	6013      	str	r3, [r2, #0]
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010
 80007d8:	20000208 	.word	0x20000208

080007dc <SysTick_Handler>:


__attribute__((interrupt)) void SysTick_Handler(void){
 80007dc:	4668      	mov	r0, sp
 80007de:	f020 0107 	bic.w	r1, r0, #7
 80007e2:	468d      	mov	sp, r1
 80007e4:	b481      	push	{r0, r7}
 80007e6:	af00      	add	r7, sp, #0
	delay++;
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <SysTick_Handler+0x24>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	3301      	adds	r3, #1
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	4b03      	ldr	r3, [pc, #12]	; (8000800 <SysTick_Handler+0x24>)
 80007f4:	801a      	strh	r2, [r3, #0]
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc81      	pop	{r0, r7}
 80007fc:	4685      	mov	sp, r0
 80007fe:	4770      	bx	lr
 8000800:	20000208 	.word	0x20000208

08000804 <main>:




int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b096      	sub	sp, #88	; 0x58
 8000808:	af00      	add	r7, sp, #0

	CAN_MESSAGE can_status_ok;
		strcpy(can_status_ok.data, "br_0000");
 800080a:	4a87      	ldr	r2, [pc, #540]	; (8000a28 <main+0x224>)
 800080c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000810:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000814:	e883 0003 	stmia.w	r3, {r0, r1}
		can_status_ok.format = STANDARD_FORMAT;
 8000818:	2300      	movs	r3, #0
 800081a:	64bb      	str	r3, [r7, #72]	; 0x48
		can_status_ok.id = 0x01;
 800081c:	2301      	movs	r3, #1
 800081e:	63bb      	str	r3, [r7, #56]	; 0x38
		can_status_ok.len = sizeof(can_status_ok.data);
 8000820:	2308      	movs	r3, #8
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
		can_status_ok.type = DATA_FRAME;
 8000824:	2300      	movs	r3, #0
 8000826:	64fb      	str	r3, [r7, #76]	; 0x4c

	CAN_MESSAGE can_status_fault;
		strcpy(can_status_fault.data, "br_1111");
 8000828:	4a80      	ldr	r2, [pc, #512]	; (8000a2c <main+0x228>)
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000832:	e883 0003 	stmia.w	r3, {r0, r1}
		can_status_fault.format = STANDARD_FORMAT;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
		can_status_fault.id = 0x01;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
		can_status_fault.len = sizeof(can_status_fault.data);
 800083e:	2308      	movs	r3, #8
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
		can_status_fault.type = DATA_FRAME;
 8000842:	2300      	movs	r3, #0
 8000844:	637b      	str	r3, [r7, #52]	; 0x34

	CAN_MESSAGE can_ack;
		strcpy(can_ack.data, "br_b_xx");
 8000846:	4a7a      	ldr	r2, [pc, #488]	; (8000a30 <main+0x22c>)
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000850:	e883 0003 	stmia.w	r3, {r0, r1}
		can_ack.format = STANDARD_FORMAT;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
		can_ack.id = 0x01;
 8000858:	2301      	movs	r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
		can_ack.len = sizeof(can_ack.data);
 800085c:	2308      	movs	r3, #8
 800085e:	617b      	str	r3, [r7, #20]
		can_ack.type = DATA_FRAME;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]


	SystemCFG();	// Configure essential registers
 8000864:	f7ff fefe 	bl	8000664 <SystemCFG>
	CanInit();
 8000868:	f7ff fcd6 	bl	8000218 <CanInit>

	Can_Set_Filter(0x00, STANDARD_FORMAT);
 800086c:	2100      	movs	r1, #0
 800086e:	2000      	movs	r0, #0
 8000870:	f7ff fde6 	bl	8000440 <Can_Set_Filter>
	Can_Set_Filter(0x02, STANDARD_FORMAT);
 8000874:	2100      	movs	r1, #0
 8000876:	2002      	movs	r0, #2
 8000878:	f7ff fde2 	bl	8000440 <Can_Set_Filter>



	int idx = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	657b      	str	r3, [r7, #84]	; 0x54
  {




	  if (!strncmp(can_rx_message.data, "mb_b_xx", 5)) {
 8000880:	2205      	movs	r2, #5
 8000882:	496c      	ldr	r1, [pc, #432]	; (8000a34 <main+0x230>)
 8000884:	486c      	ldr	r0, [pc, #432]	; (8000a38 <main+0x234>)
 8000886:	f000 f94d 	bl	8000b24 <strncmp>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	f040 80b4 	bne.w	80009fa <main+0x1f6>
		  brk_val_tab[0] = can_rx_message.data[5];
 8000892:	4b6a      	ldr	r3, [pc, #424]	; (8000a3c <main+0x238>)
 8000894:	7a5b      	ldrb	r3, [r3, #9]
 8000896:	713b      	strb	r3, [r7, #4]
		  brk_val_tab[1] = can_rx_message.data[6];
 8000898:	4b68      	ldr	r3, [pc, #416]	; (8000a3c <main+0x238>)
 800089a:	7a9b      	ldrb	r3, [r3, #10]
 800089c:	717b      	strb	r3, [r7, #5]
		  brk_val = atoi(brk_val_tab);
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f90e 	bl	8000ac2 <atoi>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		  memset(can_rx_message.data, 0, sizeof(can_rx_message.data));
 80008ac:	2208      	movs	r2, #8
 80008ae:	2100      	movs	r1, #0
 80008b0:	4861      	ldr	r0, [pc, #388]	; (8000a38 <main+0x234>)
 80008b2:	f000 f92f 	bl	8000b14 <memset>

		  // LEDs
		  GPIOC->ODR |= GPIO_ODR_6;
 80008b6:	4b62      	ldr	r3, [pc, #392]	; (8000a40 <main+0x23c>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a61      	ldr	r2, [pc, #388]	; (8000a40 <main+0x23c>)
 80008bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c0:	6153      	str	r3, [r2, #20]
		  GPIOC->ODR &= ~GPIO_ODR_9;
 80008c2:	4b5f      	ldr	r3, [pc, #380]	; (8000a40 <main+0x23c>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	4a5e      	ldr	r2, [pc, #376]	; (8000a40 <main+0x23c>)
 80008c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008cc:	6153      	str	r3, [r2, #20]
		  idx=0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	657b      	str	r3, [r7, #84]	; 0x54
		  while(idx < 102) {
 80008d2:	e082      	b.n	80009da <main+0x1d6>


			  // Motor


			  GPIOA->ODR |=  GPIO_ODR_7;
 80008d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e2:	6153      	str	r3, [r2, #20]
			  GPIOB->ODR &= ~GPIO_ODR_0;
 80008e4:	4b57      	ldr	r3, [pc, #348]	; (8000a44 <main+0x240>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	4a56      	ldr	r2, [pc, #344]	; (8000a44 <main+0x240>)
 80008ea:	f023 0301 	bic.w	r3, r3, #1
 80008ee:	6153      	str	r3, [r2, #20]
			  GPIOB->ODR &= ~GPIO_ODR_1;
 80008f0:	4b54      	ldr	r3, [pc, #336]	; (8000a44 <main+0x240>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4a53      	ldr	r2, [pc, #332]	; (8000a44 <main+0x240>)
 80008f6:	f023 0302 	bic.w	r3, r3, #2
 80008fa:	6153      	str	r3, [r2, #20]
			  GPIOB->ODR &= ~GPIO_ODR_13;
 80008fc:	4b51      	ldr	r3, [pc, #324]	; (8000a44 <main+0x240>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	4a50      	ldr	r2, [pc, #320]	; (8000a44 <main+0x240>)
 8000902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000906:	6153      	str	r3, [r2, #20]
			  delay_ms(brk_val);
 8000908:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800090c:	b29b      	uxth	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff3e 	bl	8000790 <delay_ms>
			  GPIOA->ODR &= ~GPIO_ODR_7;
 8000914:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800091e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000922:	6153      	str	r3, [r2, #20]
			  GPIOB->ODR &= ~GPIO_ODR_0;
 8000924:	4b47      	ldr	r3, [pc, #284]	; (8000a44 <main+0x240>)
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	4a46      	ldr	r2, [pc, #280]	; (8000a44 <main+0x240>)
 800092a:	f023 0301 	bic.w	r3, r3, #1
 800092e:	6153      	str	r3, [r2, #20]
			  GPIOB->ODR &= ~GPIO_ODR_1;
 8000930:	4b44      	ldr	r3, [pc, #272]	; (8000a44 <main+0x240>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <main+0x240>)
 8000936:	f023 0302 	bic.w	r3, r3, #2
 800093a:	6153      	str	r3, [r2, #20]
			  GPIOB->ODR |=  GPIO_ODR_13;
 800093c:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <main+0x240>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	4a40      	ldr	r2, [pc, #256]	; (8000a44 <main+0x240>)
 8000942:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000946:	6153      	str	r3, [r2, #20]
			  delay_ms(brk_val);
 8000948:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800094c:	b29b      	uxth	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff1e 	bl	8000790 <delay_ms>
			  GPIOA->ODR &= ~GPIO_ODR_7;
 8000954:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800095e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000962:	6153      	str	r3, [r2, #20]
			  GPIOB->ODR |=  GPIO_ODR_0;
 8000964:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <main+0x240>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	4a36      	ldr	r2, [pc, #216]	; (8000a44 <main+0x240>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6153      	str	r3, [r2, #20]
			  GPIOB->ODR &= ~GPIO_ODR_1;
 8000970:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <main+0x240>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a33      	ldr	r2, [pc, #204]	; (8000a44 <main+0x240>)
 8000976:	f023 0302 	bic.w	r3, r3, #2
 800097a:	6153      	str	r3, [r2, #20]
			  GPIOB->ODR &= ~GPIO_ODR_13;
 800097c:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <main+0x240>)
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	4a30      	ldr	r2, [pc, #192]	; (8000a44 <main+0x240>)
 8000982:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000986:	6153      	str	r3, [r2, #20]
			  delay_ms(brk_val);
 8000988:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800098c:	b29b      	uxth	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fefe 	bl	8000790 <delay_ms>
			  GPIOA->ODR &= ~GPIO_ODR_7;
 8000994:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800099e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009a2:	6153      	str	r3, [r2, #20]
			  GPIOB->ODR &= ~GPIO_ODR_0;
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <main+0x240>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <main+0x240>)
 80009aa:	f023 0301 	bic.w	r3, r3, #1
 80009ae:	6153      	str	r3, [r2, #20]
			  GPIOB->ODR |=  GPIO_ODR_1;
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <main+0x240>)
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <main+0x240>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	6153      	str	r3, [r2, #20]
			  GPIOB->ODR &= ~GPIO_ODR_13;
 80009bc:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <main+0x240>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <main+0x240>)
 80009c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009c6:	6153      	str	r3, [r2, #20]
			  delay_ms(brk_val);
 80009c8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fede 	bl	8000790 <delay_ms>
			  idx++;
 80009d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009d6:	3301      	adds	r3, #1
 80009d8:	657b      	str	r3, [r7, #84]	; 0x54
		  while(idx < 102) {
 80009da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009dc:	2b65      	cmp	r3, #101	; 0x65
 80009de:	f77f af79 	ble.w	80008d4 <main+0xd0>
		  }
		  GPIOB->ODR &= ~ GPIO_ODR_1;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <main+0x240>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <main+0x240>)
 80009e8:	f023 0302 	bic.w	r3, r3, #2
 80009ec:	6153      	str	r3, [r2, #20]
		  Can_Tx_Msg(&can_ack);
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fc40 	bl	8000278 <Can_Tx_Msg>
 80009f8:	e742      	b.n	8000880 <main+0x7c>

	  }

	  else if (!strcmp(can_rx_message.data, "mb_1010")) {
 80009fa:	4913      	ldr	r1, [pc, #76]	; (8000a48 <main+0x244>)
 80009fc:	480e      	ldr	r0, [pc, #56]	; (8000a38 <main+0x234>)
 80009fe:	f7ff fbe3 	bl	80001c8 <strcmp>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f47f af3b 	bne.w	8000880 <main+0x7c>
		  memset(can_rx_message.data, 0, sizeof(can_rx_message.data));
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	480a      	ldr	r0, [pc, #40]	; (8000a38 <main+0x234>)
 8000a10:	f000 f880 	bl	8000b14 <memset>
		  delay_ms(100);
 8000a14:	2064      	movs	r0, #100	; 0x64
 8000a16:	f7ff febb 	bl	8000790 <delay_ms>
		  // Perform status check here
		  Can_Tx_Msg(&can_status_ok);
 8000a1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fc2a 	bl	8000278 <Can_Tx_Msg>
	  if (!strncmp(can_rx_message.data, "mb_b_xx", 5)) {
 8000a24:	e72c      	b.n	8000880 <main+0x7c>
 8000a26:	bf00      	nop
 8000a28:	08000cc8 	.word	0x08000cc8
 8000a2c:	08000cd0 	.word	0x08000cd0
 8000a30:	08000cd8 	.word	0x08000cd8
 8000a34:	08000ce0 	.word	0x08000ce0
 8000a38:	200001f4 	.word	0x200001f4
 8000a3c:	200001f0 	.word	0x200001f0
 8000a40:	48000800 	.word	0x48000800
 8000a44:	48000400 	.word	0x48000400
 8000a48:	08000ce8 	.word	0x08000ce8

08000a4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopForever+0x6>)
  ldr r1, =_edata
 8000a76:	490e      	ldr	r1, [pc, #56]	; (8000ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a78:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <LoopForever+0xe>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a8c:	4c0b      	ldr	r4, [pc, #44]	; (8000abc <LoopForever+0x16>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a9a:	f7ff ffd7 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f000 f815 	bl	8000acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa2:	f7ff feaf 	bl	8000804 <main>

08000aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa6:	e7fe      	b.n	8000aa6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000ab4:	08000e04 	.word	0x08000e04
  ldr r2, =_sbss
 8000ab8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000abc:	2000020c 	.word	0x2000020c

08000ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_2_IRQHandler>

08000ac2 <atoi>:
 8000ac2:	220a      	movs	r2, #10
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f000 b8bb 	b.w	8000c40 <strtol>
	...

08000acc <__libc_init_array>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	4e0d      	ldr	r6, [pc, #52]	; (8000b04 <__libc_init_array+0x38>)
 8000ad0:	4c0d      	ldr	r4, [pc, #52]	; (8000b08 <__libc_init_array+0x3c>)
 8000ad2:	1ba4      	subs	r4, r4, r6
 8000ad4:	10a4      	asrs	r4, r4, #2
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	d109      	bne.n	8000af0 <__libc_init_array+0x24>
 8000adc:	4e0b      	ldr	r6, [pc, #44]	; (8000b0c <__libc_init_array+0x40>)
 8000ade:	4c0c      	ldr	r4, [pc, #48]	; (8000b10 <__libc_init_array+0x44>)
 8000ae0:	f000 f8e6 	bl	8000cb0 <_init>
 8000ae4:	1ba4      	subs	r4, r4, r6
 8000ae6:	10a4      	asrs	r4, r4, #2
 8000ae8:	2500      	movs	r5, #0
 8000aea:	42a5      	cmp	r5, r4
 8000aec:	d105      	bne.n	8000afa <__libc_init_array+0x2e>
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
 8000af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000af4:	4798      	blx	r3
 8000af6:	3501      	adds	r5, #1
 8000af8:	e7ee      	b.n	8000ad8 <__libc_init_array+0xc>
 8000afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000afe:	4798      	blx	r3
 8000b00:	3501      	adds	r5, #1
 8000b02:	e7f2      	b.n	8000aea <__libc_init_array+0x1e>
 8000b04:	08000dfc 	.word	0x08000dfc
 8000b08:	08000dfc 	.word	0x08000dfc
 8000b0c:	08000dfc 	.word	0x08000dfc
 8000b10:	08000e00 	.word	0x08000e00

08000b14 <memset>:
 8000b14:	4402      	add	r2, r0
 8000b16:	4603      	mov	r3, r0
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d100      	bne.n	8000b1e <memset+0xa>
 8000b1c:	4770      	bx	lr
 8000b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8000b22:	e7f9      	b.n	8000b18 <memset+0x4>

08000b24 <strncmp>:
 8000b24:	b510      	push	{r4, lr}
 8000b26:	b16a      	cbz	r2, 8000b44 <strncmp+0x20>
 8000b28:	3901      	subs	r1, #1
 8000b2a:	1884      	adds	r4, r0, r2
 8000b2c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000b30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d103      	bne.n	8000b40 <strncmp+0x1c>
 8000b38:	42a0      	cmp	r0, r4
 8000b3a:	d001      	beq.n	8000b40 <strncmp+0x1c>
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1f5      	bne.n	8000b2c <strncmp+0x8>
 8000b40:	1a98      	subs	r0, r3, r2
 8000b42:	bd10      	pop	{r4, pc}
 8000b44:	4610      	mov	r0, r2
 8000b46:	e7fc      	b.n	8000b42 <strncmp+0x1e>

08000b48 <_strtol_l.isra.0>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	4680      	mov	r8, r0
 8000b4e:	4689      	mov	r9, r1
 8000b50:	4692      	mov	sl, r2
 8000b52:	461e      	mov	r6, r3
 8000b54:	460f      	mov	r7, r1
 8000b56:	463d      	mov	r5, r7
 8000b58:	9808      	ldr	r0, [sp, #32]
 8000b5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000b5e:	f000 f885 	bl	8000c6c <__locale_ctype_ptr_l>
 8000b62:	4420      	add	r0, r4
 8000b64:	7843      	ldrb	r3, [r0, #1]
 8000b66:	f013 0308 	ands.w	r3, r3, #8
 8000b6a:	d132      	bne.n	8000bd2 <_strtol_l.isra.0+0x8a>
 8000b6c:	2c2d      	cmp	r4, #45	; 0x2d
 8000b6e:	d132      	bne.n	8000bd6 <_strtol_l.isra.0+0x8e>
 8000b70:	787c      	ldrb	r4, [r7, #1]
 8000b72:	1cbd      	adds	r5, r7, #2
 8000b74:	2201      	movs	r2, #1
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d05d      	beq.n	8000c36 <_strtol_l.isra.0+0xee>
 8000b7a:	2e10      	cmp	r6, #16
 8000b7c:	d109      	bne.n	8000b92 <_strtol_l.isra.0+0x4a>
 8000b7e:	2c30      	cmp	r4, #48	; 0x30
 8000b80:	d107      	bne.n	8000b92 <_strtol_l.isra.0+0x4a>
 8000b82:	782b      	ldrb	r3, [r5, #0]
 8000b84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8000b88:	2b58      	cmp	r3, #88	; 0x58
 8000b8a:	d14f      	bne.n	8000c2c <_strtol_l.isra.0+0xe4>
 8000b8c:	786c      	ldrb	r4, [r5, #1]
 8000b8e:	2610      	movs	r6, #16
 8000b90:	3502      	adds	r5, #2
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	bf14      	ite	ne
 8000b96:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8000b9a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8000b9e:	2700      	movs	r7, #0
 8000ba0:	fbb1 fcf6 	udiv	ip, r1, r6
 8000ba4:	4638      	mov	r0, r7
 8000ba6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8000baa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000bae:	2b09      	cmp	r3, #9
 8000bb0:	d817      	bhi.n	8000be2 <_strtol_l.isra.0+0x9a>
 8000bb2:	461c      	mov	r4, r3
 8000bb4:	42a6      	cmp	r6, r4
 8000bb6:	dd23      	ble.n	8000c00 <_strtol_l.isra.0+0xb8>
 8000bb8:	1c7b      	adds	r3, r7, #1
 8000bba:	d007      	beq.n	8000bcc <_strtol_l.isra.0+0x84>
 8000bbc:	4584      	cmp	ip, r0
 8000bbe:	d31c      	bcc.n	8000bfa <_strtol_l.isra.0+0xb2>
 8000bc0:	d101      	bne.n	8000bc6 <_strtol_l.isra.0+0x7e>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	db19      	blt.n	8000bfa <_strtol_l.isra.0+0xb2>
 8000bc6:	fb00 4006 	mla	r0, r0, r6, r4
 8000bca:	2701      	movs	r7, #1
 8000bcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000bd0:	e7eb      	b.n	8000baa <_strtol_l.isra.0+0x62>
 8000bd2:	462f      	mov	r7, r5
 8000bd4:	e7bf      	b.n	8000b56 <_strtol_l.isra.0+0xe>
 8000bd6:	2c2b      	cmp	r4, #43	; 0x2b
 8000bd8:	bf04      	itt	eq
 8000bda:	1cbd      	addeq	r5, r7, #2
 8000bdc:	787c      	ldrbeq	r4, [r7, #1]
 8000bde:	461a      	mov	r2, r3
 8000be0:	e7c9      	b.n	8000b76 <_strtol_l.isra.0+0x2e>
 8000be2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8000be6:	2b19      	cmp	r3, #25
 8000be8:	d801      	bhi.n	8000bee <_strtol_l.isra.0+0xa6>
 8000bea:	3c37      	subs	r4, #55	; 0x37
 8000bec:	e7e2      	b.n	8000bb4 <_strtol_l.isra.0+0x6c>
 8000bee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8000bf2:	2b19      	cmp	r3, #25
 8000bf4:	d804      	bhi.n	8000c00 <_strtol_l.isra.0+0xb8>
 8000bf6:	3c57      	subs	r4, #87	; 0x57
 8000bf8:	e7dc      	b.n	8000bb4 <_strtol_l.isra.0+0x6c>
 8000bfa:	f04f 37ff 	mov.w	r7, #4294967295
 8000bfe:	e7e5      	b.n	8000bcc <_strtol_l.isra.0+0x84>
 8000c00:	1c7b      	adds	r3, r7, #1
 8000c02:	d108      	bne.n	8000c16 <_strtol_l.isra.0+0xce>
 8000c04:	2322      	movs	r3, #34	; 0x22
 8000c06:	f8c8 3000 	str.w	r3, [r8]
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	f1ba 0f00 	cmp.w	sl, #0
 8000c10:	d107      	bne.n	8000c22 <_strtol_l.isra.0+0xda>
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b102      	cbz	r2, 8000c1a <_strtol_l.isra.0+0xd2>
 8000c18:	4240      	negs	r0, r0
 8000c1a:	f1ba 0f00 	cmp.w	sl, #0
 8000c1e:	d0f8      	beq.n	8000c12 <_strtol_l.isra.0+0xca>
 8000c20:	b10f      	cbz	r7, 8000c26 <_strtol_l.isra.0+0xde>
 8000c22:	f105 39ff 	add.w	r9, r5, #4294967295
 8000c26:	f8ca 9000 	str.w	r9, [sl]
 8000c2a:	e7f2      	b.n	8000c12 <_strtol_l.isra.0+0xca>
 8000c2c:	2430      	movs	r4, #48	; 0x30
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d1af      	bne.n	8000b92 <_strtol_l.isra.0+0x4a>
 8000c32:	2608      	movs	r6, #8
 8000c34:	e7ad      	b.n	8000b92 <_strtol_l.isra.0+0x4a>
 8000c36:	2c30      	cmp	r4, #48	; 0x30
 8000c38:	d0a3      	beq.n	8000b82 <_strtol_l.isra.0+0x3a>
 8000c3a:	260a      	movs	r6, #10
 8000c3c:	e7a9      	b.n	8000b92 <_strtol_l.isra.0+0x4a>
	...

08000c40 <strtol>:
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <strtol+0x24>)
 8000c42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c44:	681c      	ldr	r4, [r3, #0]
 8000c46:	4d08      	ldr	r5, [pc, #32]	; (8000c68 <strtol+0x28>)
 8000c48:	6a23      	ldr	r3, [r4, #32]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bf08      	it	eq
 8000c4e:	462b      	moveq	r3, r5
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	4613      	mov	r3, r2
 8000c54:	460a      	mov	r2, r1
 8000c56:	4601      	mov	r1, r0
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff ff75 	bl	8000b48 <_strtol_l.isra.0>
 8000c5e:	b003      	add	sp, #12
 8000c60:	bd30      	pop	{r4, r5, pc}
 8000c62:	bf00      	nop
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000064 	.word	0x20000064

08000c6c <__locale_ctype_ptr_l>:
 8000c6c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8000c70:	4770      	bx	lr

08000c72 <__ascii_mbtowc>:
 8000c72:	b082      	sub	sp, #8
 8000c74:	b901      	cbnz	r1, 8000c78 <__ascii_mbtowc+0x6>
 8000c76:	a901      	add	r1, sp, #4
 8000c78:	b142      	cbz	r2, 8000c8c <__ascii_mbtowc+0x1a>
 8000c7a:	b14b      	cbz	r3, 8000c90 <__ascii_mbtowc+0x1e>
 8000c7c:	7813      	ldrb	r3, [r2, #0]
 8000c7e:	600b      	str	r3, [r1, #0]
 8000c80:	7812      	ldrb	r2, [r2, #0]
 8000c82:	1c10      	adds	r0, r2, #0
 8000c84:	bf18      	it	ne
 8000c86:	2001      	movne	r0, #1
 8000c88:	b002      	add	sp, #8
 8000c8a:	4770      	bx	lr
 8000c8c:	4610      	mov	r0, r2
 8000c8e:	e7fb      	b.n	8000c88 <__ascii_mbtowc+0x16>
 8000c90:	f06f 0001 	mvn.w	r0, #1
 8000c94:	e7f8      	b.n	8000c88 <__ascii_mbtowc+0x16>

08000c96 <__ascii_wctomb>:
 8000c96:	b149      	cbz	r1, 8000cac <__ascii_wctomb+0x16>
 8000c98:	2aff      	cmp	r2, #255	; 0xff
 8000c9a:	bf85      	ittet	hi
 8000c9c:	238a      	movhi	r3, #138	; 0x8a
 8000c9e:	6003      	strhi	r3, [r0, #0]
 8000ca0:	700a      	strbls	r2, [r1, #0]
 8000ca2:	f04f 30ff 	movhi.w	r0, #4294967295
 8000ca6:	bf98      	it	ls
 8000ca8:	2001      	movls	r0, #1
 8000caa:	4770      	bx	lr
 8000cac:	4608      	mov	r0, r1
 8000cae:	4770      	bx	lr

08000cb0 <_init>:
 8000cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb2:	bf00      	nop
 8000cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cb6:	bc08      	pop	{r3}
 8000cb8:	469e      	mov	lr, r3
 8000cba:	4770      	bx	lr

08000cbc <_fini>:
 8000cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cbe:	bf00      	nop
 8000cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cc2:	bc08      	pop	{r3}
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	4770      	bx	lr
